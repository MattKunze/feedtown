name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      web: ${{ steps.changes.outputs.web }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect file changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          rust:
            - 'api/**'
            - 'db/**'
            - 'migration/**'
            - 'Cargo.toml'
            - 'Cargo.lock'
          web:
            - 'web/**'

  rust-lint:
    name: Rust Linting
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check Rust formatting
      run: cargo fmt --all -- --check
      
    - name: Run Rust linting
      run: cargo clippy --all-targets --all-features -- -D warnings

  rust-test:
    name: Rust Testing
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run Rust tests
      run: cargo test --verbose --all-features

  web-lint:
    name: Web Linting & Type Checking
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
        
    - name: Cache Deno dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/deno
          ~/.deno
          web/node_modules
        key: ${{ runner.os }}-deno-${{ hashFiles('web/deno.lock', 'web/deno.jsonc') }}
        
    - name: Check Deno formatting
      working-directory: ./web
      run: deno fmt --check src/
      
    - name: Run Deno linting
      working-directory: ./web
      run: deno lint src/
      
    - name: Run Deno type checking
      working-directory: ./web
      run: deno check src/main.tsx

  web-test:
    name: Web Testing
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
        
    - name: Cache Deno dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/deno
          ~/.deno
          web/node_modules
        key: ${{ runner.os }}-deno-${{ hashFiles('web/deno.lock', 'web/deno.jsonc') }}
        
    - name: Run Deno tests
      working-directory: ./web
      run: deno test src/ --allow-all

  # Build check for web application
  web-build:
    name: Web Build Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
        
    - name: Cache Deno dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/deno
          ~/.deno
          web/node_modules
        key: ${{ runner.os }}-deno-${{ hashFiles('web/deno.lock', 'web/deno.jsonc') }}
        
    - name: Build web application
      working-directory: ./web
      run: deno task build